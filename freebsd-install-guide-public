################################################################################
##----------------------------------------------------------------------------##
##                   FreeBSD 10+ Release Installation Notes                   ##
##----------------------------------------------------------------------------##
################################################################################
# This guide covers everything I did to setup my FreeBSD Server. I will cover
# the following key areas
#
# - Setup utilities such as OpenNTPD for time and NUT for UPS monitoring
# - OpenSMTPD for external emailing of periodic emails (including IPMI checks)
# - ZFS setup for AF 4K drives and snapshotting script
# - Mostly jail friendly NFSv4 (with v2/v3 support commented)
# - Ezjail setup split to DMZ/LAN segments with syslog to host system
#
# This version is slightly modified to remove any passwords, IPs, or domain
# names that may be sensitive. For the most part, if you use a find/replace on
# the find and replace section and the initial configuration section you can
# probably copy and paste most of what you see here straight into a terminal. 
#
# Written in 2012-2021 by Jason Unovitch
#   jason.unovitch@gmail.com
#   https://github.com/junovitch
#
# To the extent possible under law, the author(s) have dedicated all copyright
# and related and neighboring rights to this software to the public domain
# worldwide. This software is distributed without any warranty.
#
# You should have received a copy of the CC0 Public Domain Dedication along with
# this software. If not, see http://creativecommons.org/publicdomain/zero/1.0/
#
################################################################################
##----------------------------------------------------------------------------##
##                       Install Notes (TRIM Support)                         ##
##----------------------------------------------------------------------------##
################################################################################
#
# If using an SSD, be sure to enable TRIM support during the install. This
# can be done during the initial partitioning if doing it manually. Otherwise
# drop to a shell post install or boot into single user mode and enter the
# below commands for the data partition.
#
# SU+J will also be disabled as the journaling may not be needed on SSDs.
#
# mount
# tunefs -t enable /dev/ada0p2
# tunefs -j disable /dev/ada0p2
# reboot
#
# Some info can be found on the forums
# http://forums.freebsd.org/showthread.php?t=28004
# And here
# http://www.wonkity.com/~wblock/docs/html/ssd.html
#
# If not using and SSD this is not needed.
#
################################################################################
##----------------------------------------------------------------------------##
##                       Install Notes (ZFS  Support)                         ##
##----------------------------------------------------------------------------##
################################################################################
#
# Manual setup for ZFS.
# The FreeBSD installer should be used for this, however given my system was
# converted to ZFS only after being installed, here's how the current config
# was done. Additionally, the original 'zfs' raidz pool was migrated live to
# a 4 disk 'zroot' setup in a RAID-10 like configuration. Since this was all
# done on a live system the FreeBSD installer wasn't used.
#
################################################################################
# Search for all hard drives in the `dmesg`, confirm with `smartctl`
# Note the devices shown for later (i.e. /dev/ada0 and so on)
#
# Performance using native 4K sectors should be faster in Advanced Format
# drives that use physical 4096K sector and fake a 512K sector to the OS. I
# tested repeated transfers of 13.5 gb of files from the main SSD onto a raid-z
# pool using each sector size.
#
# Mean write speed on a 512 byte pool  - 123.5 mb/sec
# Mean write speed on a 4096 byte pool - 134.5 mb/sec (9% faster)
################################################################################

dmesg | grep "sectors"
smartctl -a /dev/ada0 | grep "Sector Sizes"
smartctl -a /dev/ada1 | grep "Sector Sizes"
smartctl -a /dev/ada2 | grep "Sector Sizes"
smartctl -a /dev/ada3 | grep "Sector Sizes"

################################################################################
# Check that no partitions are on the disk, if so see gpart(8) for guidance on
# deleting them.
################################################################################

gpart show

################################################################################
# Manually create the partition tables followed by a ZFS type (-t) partition
# beginning (-b) at the 1 mb mark and aligned (-a) to 4096 sized sectors. The
# label (-l) can be freely changed to whatever is intuitive.
#
# `smartctl -a /dev/ada1` will list all properties of the drive including
# serial number which is used below.
################################################################################

# Bay 1
gpart create -s gpt ada0
gpart add -t freebsd-boot -l bay1_bootcode -s 512k ada0
gpart add -t freebsd-swap -b 1M -s 16G -a 4096 ada0
gpart add -t freebsd-zfs -l bay1_XXXXXXXXXXXX -a 4096 ada0
gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ada0

# Bay 2
gpart create -s gpt ada1
gpart add -t freebsd-boot -l bay2_bootcode -s 512k ada1
gpart add -t freebsd-swap -b 1M -s 16G -a 4096 ada1
gpart add -t freebsd-zfs -l bay2_XXXXXXXXXXXX -a 4096 ada1
gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ada1

# Bay 3
gpart create -s gpt ada2
gpart add -t freebsd-boot -l bay3_bootcode -s 512k ada2
gpart add -t freebsd-zfs -l bay3_XXXXXXXXXXXX -b 1M -a 4096 ada2
gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ada2

# Bay 4
gpart create -s gpt ada3
gpart add -t freebsd-boot -l bay4_bootcode -s 512k ada3
gpart add -t freebsd-zfs -l bay4_XXXXXXXXXXXX -b 1M -a 4096 ada3
gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ada3

################################################################################
# Create gnop translation devices with 4096 sector sizes to force ZFS to
# ignore 512 byte block size simulated by the drives.
################################################################################

gnop create -S 4096 gpt/bay1_XXXXXXXXXXXX
gnop create -S 4096 gpt/bay2_XXXXXXXXXXXX
gnop create -S 4096 gpt/bay3_XXXXXXXXXXXX
gnop create -S 4096 gpt/bay4_XXXXXXXXXXXX

################################################################################
# Build the ZFS array using the translations.
#
# The name of the array used here and for the remaining guide is 'zroot'.
################################################################################

zpool create zroot mirror /dev/gpt/bay1_XXXXXXXXXXXX.nop /dev/gpt/bay2_XXXXXXXXXXXX.nop mirror /dev/gpt/bay3_XXXXXXXXXXXX.nop /dev/gpt/bay4_XXXXXXXXXXXX.nop
# Export the zpool
zpool export zroot
# Trash the gnops
gnop destroy /dev/gpt/bay1_XXXXXXXXXXXX.nop
gnop destroy /dev/gpt/bay2_XXXXXXXXXXXX.nop
gnop destroy /dev/gpt/bay3_XXXXXXXXXXXX.nop
gnop destroy /dev/gpt/bay4_XXXXXXXXXXXX.nop
# Re-import the zpool for manual install and dataset creation
zpool import -o altroot=/mnt zroot
# Verify ashift = 12 shows up
zdb

################################################################################
# Build datasets as needed
################################################################################

# Create requisite datasets based off 10.1-RELEASE layout
zfs create -o compression=lz4 -o atime=off -o mountpoint=none -o copies=2 zroot/ROOT
zfs create -o compression=lz4 -o atime=off -o mountpoint=/ zroot/ROOT/default
zfs create -o compression=lz4 -o atime=off -o mountpoint=/tmp -o exec=on -o setuid=off zroot/tmp
zfs create -o compression=lz4 -o atime=off -o mountpoint=/usr -o canmount=off zroot/usr
zfs create -o compression=lz4 -o atime=off zroot/usr/doc
chown jason:unovitch /mnt/usr/doc
zfs create -o compression=lz4 -o atime=off zroot/usr/home
zfs create -o compression=lz4 -o atime=off zroot/usr/obj
zfs create -o compression=lz4 -o atime=off -o setuid=off zroot/usr/ports
zfs create -o compression=lz4 -o atime=off zroot/usr/src
zfs create -o compression=lz4 -o atime=off -o mountpoint=/var -o canmount=off zroot/var
zfs create -o compression=lz4 -o atime=off -o exec=off -o setuid=off zroot/var/audit
zfs create -o compression=lz4 -o atime=off -o exec=off -o setuid=off zroot/var/crash
zfs create -o compression=lz4 -o atime=off -o exec=off -o setuid=off zroot/var/log
zfs create -o compression=lz4 -o atime=on zroot/var/mail
zfs create -o compression=lz4 -o atime=off -o setuid=off zroot/var/tmp

# Install FreeBSD
cd /usr/freebsd-dist/
sh -c 'for file in base.txz lib32.txz kernel.txz doc.txz games.txz; do tar --unlink -xvpJf $file -C /mnt; done'
zpool set bootfs=zroot/ROOT/default zroot

echo 'zfs_load="YES"' >> /mnt/boot/loader.conf
echo 'zfs_enable="YES"' >> /mnt/etc/rc.conf
echo 'zfsd_enable="YES"' >> /mnt/etc/rc.conf
touch /mnt/etc/fstab

# Other datasets
zfs create -o mountpoint=/zfs/data -o compression=lz4 zroot/data
zfs create -o mountpoint=/zfs/homedirs zroot/homedirs
zfs create zroot/homedirs/public
zfs create -o compression=lz4 zroot/homedirs/jason
zfs create zroot/homedirs/common_media
zfs create -o compression=lz4 zroot/homedirs/common_assorted
zfs create -o dedup=on zroot/homedirs/common_photos

zfs unmount -a
shutdown -r now

################################################################################
##----------------------------------------------------------------------------##
##                       Initial Configuration Section                        ##
##----------------------------------------------------------------------------##
################################################################################
# We're going to erase the current rc.conf and build our own. You should review
# this listing closely and do a find and replace to change IPs prefixes and 
# the domain name now. This information will repeat several times as we go
# through the guide. Once all the addresses are valid, copy-paste up until the
# 'EOF' marker.
#
# The rc.conf contains descriptive information about the local host name,
# configuration details for any potential network interfaces and which services
# should be started up at system intial boot time. You can get a good idea what
# runs on a system by reviewing this file. If you are new to FreeBSD, you may
# want to start with `man rc.conf` and review that page. One thing to note is
# you can often do `man **.conf` on many files and learn how they should be
# configured.
################################################################################

cat > /etc/rc.conf << 'EOF'
# General System Config
# Set dumpdev to "AUTO" to enable crash dumps, "NO" to disable
dumpdev="AUTO"
fsck_y_enable="YES"
powerd_enable="YES"
zfs_enable="YES"
zfsd_enable="YES"

# Baseline kernel modules to load after boot
kld_list="dtraceall accf_http accf_data"

# General Network Configuration
hostname="xts-bsd.pa-us.mydomain.name"
sshd_enable="YES"
defaultrouter="10.102.2.1"
rtsold_enable="YES"
#XXX verify it works... ipv6_activate_all_interfaces="YES"

# DMZ/External Interface Configuration
ifconfig_em0="SYNCDHCP"
ifconfig_em0_ipv6="inet6 accept_rtadv"

# LAN/Internal Interface Configuration
ifconfig_em1="inet 10.102.2.2/24"
ifconfig_em1_ipv6="inet6 accept_rtadv"

# Syslog Configuration, bind (-b) to LAN Internal address
syslogd_enable="YES"
syslogd_flags="-v -v -b 10.102.2.2:syslog"
'EOF'

################################################################################
#  Randomness
################################################################################

echo '' >> /etc/sysctl.conf
echo '# Randomness' >> /etc/sysctl.conf
echo 'net.inet.ip.random_id="1"' >> /etc/sysctl.conf
echo 'kern.randompid="100"' >> /etc/sysctl.conf

#XXX verify it works...  echo 'net.inet6.ip6.dad_count=0' >> /etc/sysctl.conf

################################################################################
# A `shutdown -r now` for a reboot would be sufficient now, or this would work.
#
# hostname xts-bsd.pa-us.mydomain.name
# service powerd restart
# service netif restart
# service syslogd restart
# kldload dtraceall
# kldload accf_http
# kldload accf_data
################################################################################

shutdown -r now

################################################################################
# User Add examples
################################################################################

pw groupadd -n unovitch -g 2194
pw useradd -m -n jason -c "Jason Unovitch,,," -u 1986 -g unovitch -G wheel -s /bin/tcsh
passwd jason

################################################################################
##----------------------------------------------------------------------------##
##               Configure General Programs for Host System Use               ##
##----------------------------------------------------------------------------##
################################################################################
# Let's get an initial ports tree for any installs from source. After this point
# you only have to `portsnap fetch update` to keep everything in check.
#
# http://www5.us.freebsd.org/doc/en_US.ISO8859-1/books/handbook/updating-upgrading-portsnap.html
################################################################################

portsnap fetch extract

################################################################################
# Initial FreeBSD-Update for the latest security patches and to make sure
# PKG repos are enabled with PKG public key in place.
#
# http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/pkgng-intro.html
################################################################################

freebsd-update fetch
freebsd-update install

pkg

cat >> /etc/periodic.conf << 'EOF'
##### Package related checks
daily_backup_pkgdb_enable="NO"
daily_status_security_pkg_checksum_enable="YES"
'EOF'

################################################################################
# Tmux - Separates the terminal from the current login. Useful if an SSH link
# gets broken during an install or you have to leave. Whatever is running
# will keep running.
################################################################################

pkg install tmux
rehash
tmux

################################################################################
# Bash - GNU Bourne Again Shell required for some ports and install scripts.
################################################################################

pkg install bash

################################################################################
# Zsh - The Z shell
################################################################################

pkg install zsh

################################################################################
# Fish - The Fish shell
################################################################################

pkg install fish

################################################################################
# Perl - Used for misc editing tasks and various programs.
################################################################################

pkg install perl5

################################################################################
# NTPD
################################################################################

sysrc ntpd_enable='YES'

service ntpd start

################################################################################
# OpenSMTPD - Simple and secure email MTA used for system notification emails.
#
# The guide link below is very helpful, but check `man smtpd.conf` for
# examples on the syntax to use as this is a bit dated. If you use an address
# other than @gmail.com checking the man page will probably be required.
#
# https://cooltrainer.org/2012/06/06/external-mailing-on-freebsd/
#
# Also see this link for notes and examples on the new syntax as of Jan 2013
# http://forums.freebsd.org/showthread.php?t=36745
################################################################################
#
#pkg install opensmtpd
#
#cd /usr/local/etc/mail/
#
#cat > smtpd.conf << 'EOF'
## This is the smtpd server system-wide configuration file.
## See smtpd.conf(5) for more information.
#
## To accept external mail, replace with: listen on all
#listen on localhost
#listen on 10.102.2.2
#
## If you edit the file, you have to run "smtpctl update table aliases"
#table aliases file:/etc/mail/aliases
#table secrets db:/usr/local/etc/mail/secrets.db
#table trusted_IPs { 10.0.0.0/8 }
#
## Uncomment the following to accept external mail for domain "example.org"
##accept from any for domain "example.org" alias <aliases> deliver to mbox
#accept for local alias <aliases> deliver to mbox
#accept from local for domain "gmail.com" relay via tls+auth://gmail_login@smtp.gmail.com:587 auth <secrets>
#accept from source <trusted_IPs> for domain "mydomain.name" alias <aliases> deliver to mbox
#'EOF'
#
#touch secrets
#chmod 640 secrets
#chown root:_smtpd secrets
#echo 'gmail_login  jason.unovitch:CHANGETHISTOTHEPASSWORD' >> secrets
#/usr/local/libexec/opensmtpd/makemap secrets
#
#perl -pwi -e 's^# root:\tme\@my.domain^root:\tjason.unovitch\@gmail.com^' /etc/mail/aliases
#smtpctl update table aliases
#
#echo '' >> /etc/rc.conf
#echo '# Disable Sendmail MTA' >> /etc/rc.conf
#echo 'sendmail_enable="NO"' >> /etc/rc.conf
#echo 'sendmail_submit_enable="NO"' >> /etc/rc.conf
#echo 'sendmail_outbound_enable="NO"' >> /etc/rc.conf
#echo 'sendmail_msp_queue_enable="NO"' >> /etc/rc.conf
#echo '' >> /etc/rc.conf
#echo '# Enable OpenSMTPD MTA' >> /etc/rc.conf
#echo 'smtpd_enable="YES"' >> /etc/rc.conf
#
#service sendmail stop
#service smtpd start
#
#echo "Test message" | mail -s "Test Email" root
#
################################################################################
# OpenVPN Certificate Authority
################################################################################

pkg install openvpn

cp -Rv /usr/local/share/easy-rsa/ /usr/local/etc/openvpn-ca
cd /usr/local/etc/openvpn-ca

perl -pwi -e 's^KEY_PROVINCE=.*^KEY_PROVINCE="PA"^g' vars
perl -pwi -e 's^KEY_SIZE=.*^KEY_SIZE=2048^g' vars
perl -pwi -e 's^KEY_CITY=.*^KEY_CITY="Someplace"^g' vars
perl -pwi -e 's^KEY_ORG=.*^KEY_ORG="SomethingSomewhere"^g' vars
perl -pwi -e 's^KEY_CN=.*^KEY_CN=SomethingSomewhere^' vars
perl -pwi -e 's^KEY_NAME=.*^KEY_NAME=SomethingSomewhere^' vars
perl -pwi -e 's^KEY_OU=.*^KEY_OU=SomethingSomewhere^' vars
perl -pwi -e 's^PKCS11_MODULE_PATH=.*^PKCS11_MODULE_PATH=SomethingSomewhere^' vars
perl -pwi -e 's^PKCS11_PIN=.*^PKCS11_PIN=1234^' vars
perl -pwi.interact -e 's^ --interact^^g' build-ca build-key

bash
. ./vars
./clean-all
./build-dh
export KEY_CN=xts-bsd && export KEY_NAME=xts-bsd && ./build-ca
export KEY_CN=xts-rtr-server && export KEY_NAME=xts-rtr-server && ./build-key-server xts-rtr-server
export KEY_CN=xju-rtr-server && export KEY_NAME=xju-rtr-server && ./build-key-server xju-rtr-server
export KEY_CN=xts-rtr-client && export KEY_NAME=xts-rtr-client && ./build-key xts-rtr-client
export KEY_CN=xju-rtr-client && export KEY_NAME=xju-rtr-client && ./build-key xju-rtr-client

/usr/local/sbin/openvpn --genkey --secret keys/ta.key

scp keys/dh2048.pem root@xts-rtr:/usr/local/etc/openvpn/keys

scp keys/ca.crt root@xts-rtr:/usr/local/etc/openvpn/keys
scp keys/ca.crt root@xju-rtr:/usr/local/etc/openvpn/keys

scp keys/ta.key root@xts-rtr:/usr/local/etc/openvpn/keys
scp keys/ta.key root@xju-rtr:/usr/local/etc/openvpn/keys

scp keys/xts-rtr-* root@xts-rtr:/usr/local/etc/openvpn/keys
scp keys/xju-rtr-* root@xju-rtr:/usr/local/etc/openvpn/keys

################################################################################
# Pstree - Better eye on process associations.
# Use via `pstree`
################################################################################

pkg install pstree

################################################################################
# Iftop - useful tool for network monitoring, more details than `systat -ifs`
# Use via `iftop -i em1` or `iftop -i em0`
################################################################################

pkg install iftop

################################################################################
# Cmdwatch - Repeat a command every few seconds for monitoring/testing.
# Use via `cmdwatch`
################################################################################

pkg install cmdwatch

################################################################################
# Tree - For displaying a more graphical listing of files
# Use via `tree`
################################################################################

pkg install tree

################################################################################
# Vim-lite - Handles most text editing, very useful for syntax highlighting.
################################################################################

pkg install vim-console

################################################################################
# Checkbashisms - Checks for potential Bash specific commands in scripts that
# could cause compatibility issues.
################################################################################

pkg install checkbashisms

################################################################################
# Portlint, Rclint, and Igor for checking ports, scripts, and man pages
################################################################################

pkg install portlint rclint igor

################################################################################
# IPMItool
# Example to display sensors data: ipmitool sdr
################################################################################

# Add ipmi kernel module prerequisite to boot time kernel module load list
sysrc kld_list+=ipmi

# Load ipmi kernel module now
kldload ipmi

# Install
pkg install ipmitool

################################################################################
# Nut (Network UPS Tools) - Monitor UPS status and auto-shutdown if necessary
# http://people.freebsd.org/~thierry/nut_FreeBSD_HowTo.txt 
################################################################################

pkg install nut

# Still testing as of 31 December, almost there...
# Haven't had the time to actually validate this works properly

echo '' >> /etc/rc.conf
echo '## UPS Monitoring Tools' >> /etc/rc.conf
echo 'nut_enable="YES"' >> /etc/rc.conf
echo 'nut_upslog_enable="YES"' >> /etc/rc.conf
echo 'nut_upsmon_enable="YES"' >> /etc/rc.conf

# Configure ups.conf for SNMP for monitoring
cd /usr/local/etc/nut
cp ups.conf.sample ups.conf
printf "[UPS]\n" >> ups.conf
printf "\tdriver = snmp-ups\n" >> ups.conf
printf "\tport = 10.102.0.254\n" >> ups.conf
printf "\tcommunity = MY-SNMP-RO\n" >> ups.conf

# Copy default upsd.conf
cp upsd.conf.sample upsd.conf

# Generate random passwords for each user
dd if=/dev/urandom bs=32 count=1 | openssl base64 | cut -b -32

# Configure upsd.users
cp upsd.users.sample upsd.users
printf '# Supervision user\n' >> upsd.users
printf '[admin]\n' >> upsd.users
printf '\tpassword = adminpassword\n' >> upsd.users
printf '\tactions = SET\n' >> upsd.users
printf '\tactions = FSD\n' >> upsd.users
printf '\tinstcmds = ALL\n\n' >> upsd.users
printf '# Protection user\n' >> upsd.users
printf '[monuser]\n' >> upsd.users
printf '\tpassword  = userpassword\n' >> upsd.users
printf '\tupsmon master\n' >> upsd.users

# Configure upsmon.conf
cp upsmon.conf.sample upsmon.conf
echo 'MONITOR UPS@localhost 1 monuser userpassword master' >> upsmon.conf
echo 'SHUTDOWNCMD "/sbin/shutdown -p now"' >> upsmon.conf

# Fix perms/ownership
chown uucp /usr/local/etc/nut/*.conf /usr/local/etc/nut/upsd.users
chmod 440 /usr/local/etc/nut/*.conf /usr/local/etc/nut/upsd.users

# Start NUT
service nut start
service nut_upslog start
service nut_upsmon start

################################################################################
# Logcheck - Reviews log files.
################################################################################

# Setup
pkg install logcheck

cat > /usr/local/etc/logcheck/logcheck.logfiles << 'EOF'
/var/log/all.log
/var/log/auth.log
'EOF'

# Allow /var/log/all.log to be used
perl -pwi -e 'if (/all\.log/)  {s/#\*\.\*/\*\.\*/;}' /etc/syslog.conf

# Create /var/log/all.log and restart syslogd
touch /var/log/all.log
service syslogd restart

# Add root:logcheck after all.log and change perms on that line from 600 to 640
perl -pwi -e 'if (/all\.log/)  {s/all\.log\t\t/all.log\troot:logcheck/;   s/600/640/; }' /etc/newsyslog.conf
perl -pwi -e 'if (/auth\.log/) {s/auth\.log\t\t/auth.log\troot:logcheck/; s/600/640/; }' /etc/newsyslog.conf

# Fix permissions
chown root:logcheck /var/log/all.log /var/log/auth.log
chmod 640 /var/log/all.log /var/log/auth.log

# Change alias for mailing
perl -pwi -e 's^# General redirections for pseudo accounts^# General redirections for pseudo accounts\nlogcheck:\tjason^' /etc/mail/aliases
smtpctl update table aliases

# Copy logcheck crontab into place and fix permissions
cp /usr/local/share/examples/logcheck/crontab.in /var/cron/tabs/logcheck
chmod 600 /var/cron/tabs/logcheck

################################################################################
# Iperf
################################################################################

pkg install iperf

################################################################################
# Sudo
################################################################################

pkg install sudo

################################################################################
# Panicmail - Report kernel panics.
################################################################################

pkg install panicmail
sysrc panicmail_enable='YES'

################################################################################
# DTraceToolkit - Experimental scripts for investigating issues
# /usr/share/dtrace already has scripts that are FreeBSD tested
################################################################################

pkg install mksh dtrace-toolkit

################################################################################
# CPU microcode update port (FreeBSD 12+ only)
#
# https://www.thomas-krenn.com/en/wiki/Update_Intel_Microcode_on_FreeBSD
################################################################################

pkg install devcpu-data
sysrc microcode_update_enable='YES'
service microcode_update start

sysrc -f /boot/loader.conf cpu_microcode_load='YES'
sysrc -f /boot/loader.conf cpu_microcode_name='/boot/firmware/intel-ucode.bin'

################################################################################
# LADVD
################################################################################

pkg install ladvd
sysrc ladvd_enable='YES'
sysrc ladvd_flags='-r -L -z -m em1 -c US'
service ladvd start

################################################################################
# Cleanup periodic messages for readability on a phone.
################################################################################

cat >> /etc/periodic.conf << 'EOF'
##### General formatting
daily_show_success="NO"
security_show_success="NO"
daily_status_security_inline="YES"
weekly_status_security_inline="YES"
monthly_status_security_inline="YES"
##### Remove non-essential checks
daily_status_rwho_enable="NO"
daily_clean_hoststat_enable="NO"
daily_status_network_enable="NO"
##### Disk/filesystem status and maintenance checks
daily_status_disks_enable="NO"
daily_clean_tmps_enable="YES"
##### Routine Poudriere builds/updates make this too noisy to be useful on host
security_status_chksetuid_enable="NO"
'EOF'

################################################################################
# Make all periodic jobs run one hour later. Also add a bi-weekly 
# `freebsd-update` check as well as a `portsnap cron` to keep have a current
# ports files ready to go.
#
# The new /etc/crontab will look like this:
#
# 1	4	*	*	*	root	periodic daily
# 15	5	*	*	6	root	periodic weekly
# 30	6	1	*	*	root	periodic monthly
################################################################################

perl -pwi -e 's/^1\t3/1\t4/' /etc/crontab
perl -pwi -e 's/^15\t4/15\t5/' /etc/crontab
perl -pwi -e 's/^30\t5/30\t6/' /etc/crontab

printf "5\t4\t*\t*\t*\t/usr/sbin/portsnap cron\n" >> /var/cron/tabs/root
printf "30\t5\t*\t*\ttue,sat\t/usr/sbin/freebsd-update cron\n" >> /var/cron/tabs/root

# Also, remove 'src' line from Components to prevent freebsd-update from trying
# to update /usr/src
sed -i '' -e '/^Components/ s/ src//' /etc/freebsd-update.conf

################################################################################
##----------------------------------------------------------------------------##
##                  Programs Related to Host System Storage                   ##
##----------------------------------------------------------------------------##
################################################################################
# Kick off scrub via cron the first Monday of every month to keep scrubs from
# slowing down other cron jobs that run throughout the week. If this by some
# chance fails, the periodic.conf job is enabled in the next lines and the
# default of 35 days will ensure a scrub gets run routinely. Also enable
# reporting on zfs status daily.
################################################################################

printf '0\t4\t*\t*\tmon\t[ $(/bin/date +\\%%d) -le 7 ] && /sbin/zpool scrub zroot\n' >> /var/cron/tabs/root
sysrc -f /etc/periodic.conf daily_status_zfs_enable='YES'
sysrc -f /etc/periodic.conf daily_scrub_zfs_enable='YES'

################################################################################
# Quick Rolling snapshot scripts for a month's worth of snapshot along with
# a permanent snapshot made on the first of every month.
################################################################################

cat > /usr/local/etc/periodic/daily/900.rollingsnap << 'EOF'
#!/bin/sh
_30DAYSAGO=$(/bin/date -v -30d "+%Y%m%d")
_SNAPDATE=$(/bin/date "+%Y%m%d")

zfs destroy -r zroot/homedirs@$_30DAYSAGO-autodaily > /dev/null 2>&1
zfs snapshot -r zroot/homedirs@$_SNAPDATE-autodaily
zfs destroy -r zroot/data@$_30DAYSAGO-autodaily > /dev/null 2>&1
zfs snapshot -r zroot/data@$_SNAPDATE-autodaily
'EOF'
chmod 555 /usr/local/etc/periodic/daily/900.rollingsnap

cat > /usr/local/etc/periodic/monthly/900.monthlysnap << 'EOF'
#!/bin/sh
_SNAPDATE=$(/bin/date "+%Y%m%d")
zfs rename -r zroot/homedirs@$_SNAPDATE-autodaily @$_SNAPDATE-automonthly > /dev/null 2>&1
zfs rename -r zroot/data@$_SNAPDATE-autodaily @$_SNAPDATE-automonthly > /dev/null 2>&1
'EOF'
chmod 555 /usr/local/etc/periodic/monthly/900.monthlysnap

################################################################################
# sysutils/zfstools for snapshot management
################################################################################

pkg install zfstools
# Add crontab entries show by pkg-message
# crontab -e
zfs set com.sun:auto-snapshot=true zroot/ROOT
zfs set com.sun:auto-snapshot=true zroot/homedirs
zfs set com.sun:auto-snapshot=true zroot/iocage/jails

################################################################################
# Smartd package for basic disk management and status checking.  We'll set up
# the smartd.conf for more detailed checks along with sending a notification
# email to root if issues get detected.
# 
# Basic explanation (enter `man smartd.conf` to get more detailed info)
# DEVICESCAN infers checking all drives
# "-I 194 -W 5,45,55" sends emails for changes of 5 degrees, info notices at
#	45 degrees, and critical message above 55 degrees
# "-s (S/../.././05|L/../../5/06)" runs short check daily at 5AM, long check
#	weekly at 6 am on Friday.
################################################################################

pkg install smartmontools

cp /usr/local/etc/smartd.conf.sample /usr/local/etc/smartd.conf
perl -pwi -e 's^\ADEVICESCAN\n^DEVICESCAN -a -o on -S on -I 194 -W 5,45,55 -R 5 -m root -s (S/../.././05|L/../../5/06)\n^' /usr/local/etc/smartd.conf

sysrc -f /etc/periodic.conf daily_status_smart_devices='/dev/ada0 /dev/ada1 /dev/ada2 /dev/ada3'

echo '' >> /etc/rc.conf
echo '# Smartd disk monitoring' >> /etc/rc.conf
echo 'smartd_enable="YES"' >> /etc/rc.conf

service smartd start

################################################################################
# NCDU - Useful tool for determining disk usage
################################################################################

pkg install ncdu

################################################################################
# DUFF - Find duplicates
################################################################################

pkg install duff

################################################################################
# Mbuffer - zfs send/recv aid
################################################################################

pkg install mbuffer

################################################################################
# Rsync
################################################################################

pkg install rsync

################################################################################
# Unison
################################################################################

pkg install unison-nox11

################################################################################
# Setup of Unison for use
# Prerequisites:
# 1. Generate an SSH key for root.
#    ssh-keygen -t ed25519 -C "`whoami`@`hostname`-`date +%Y%m%d`"
# 2. Distribute this out to each host to be synced.
# 3. Ensure root login enable on all clients. Update sshd_config to show:
#    PermitRootLogin without-password
#
# Warning:
# This does give root on the FreeBSD host the ability to SSH into each box.
# Protect this accordingly.
################################################################################

cat > /root/bin/unison_sync.sh << 'EOF'
#!/bin/sh
unison=/usr/local/bin/unison
unison_args="-auto -batch -prefer newer -owner -group -times -contactquietly -clientHostName freenas"

paths=`ls -r /zfs/homedirs`
remotes="10.82.2.2"

for r in $remotes; do
    for p in $paths; do
        if [ ! -f "/tmp/unison-$r-$p.lock" ] || [ "$1" = "wait" ]; then
            lockf "/tmp/unison-$r-$p.lock" $unison $unison_args "/zfs/homedirs/$p" "ssh://$r//mnt/zfs/homedirs/$p"
        fi
    done
done
'EOF'

# Add a nightly unison cron job
printf "0\t5\t*\t*\t*\t/root/bin/unison_sync.sh\n" >> /var/cron/tabs/root

################################################################################
# ZFS-Stats
################################################################################

pkg install zfs-stats

################################################################################
# Beadm
# Work around panic in built in bectl(8) - https://bugs.FreeBSD.org/252396
################################################################################

pkg install beadm

################################################################################
##----------------------------------------------------------------------------##
##                    Configure Host System NFS Support                       ##
##----------------------------------------------------------------------------##
################################################################################
# Enable jail friendly NFS Support. NFSv4 is currently in use and the prior
# v2/v3 configurations are available but commented out.
################################################################################

touch /etc/exports
echo '' >> /etc/rc.conf
echo '# NFS V2/V3 Support' >> /etc/rc.conf
echo '#rpcbind_enable="YES"' >> /etc/rc.conf
echo '#rpcbind_flags="-h 10.102.2.2"' >> /etc/rc.conf
echo '#nfs_server_enable="YES"' >> /etc/rc.conf
echo '#nfs_server_flags="-u -t -n 4 -h 10.102.2.2"' >> /etc/rc.conf
echo '#mountd_enable="YES"' >> /etc/rc.conf
echo '#mountd_flags="-r -h 10.102.2.2"' >> /etc/rc.conf
echo '#rpc_lockd_enable="YES"' >> /etc/rc.conf
echo '#rpc_lockd_flags="-h 10.102.2.2"' >> /etc/rc.conf
echo '#rpc_statd_enable="YES"' >> /etc/rc.conf
echo '#rpc_statd_flags="-h 10.102.2.2"' >> /etc/rc.conf
echo '' >> /etc/rc.conf
echo '# NFSv4 Configuration' >> /etc/rc.conf
echo '#nfs_server_enable="YES"' >> /etc/rc.conf
echo '#nfsv4_server_enable="YES"' >> /etc/rc.conf
echo '#nfsuserd_enable="YES"' >> /etc/rc.conf
echo '#nfsuserd_flags="-domain mydomain.name"' >> /etc/rc.conf
echo '#nfs_server_flags="-u -t -h 10.102.2.2"' >> /etc/rc.conf
echo '#rpcbind_enable="YES"' >> /etc/rc.conf
echo '#rpcbind_flags="-h 10.102.2.2"' >> /etc/rc.conf
echo '#mountd_enable="YES"' >> /etc/rc.conf
echo '#mountd_flags="-r -h 10.102.2.2"' >> /etc/rc.conf
echo '' >> /etc/rc.conf
echo '# NFSv4 only (13.0+ only) configuration' >> /etc/rc.conf
echo 'nfs_server_enable="YES"' >> /etc/rc.conf
echo 'nfsv4_server_enable="YES"' >> /etc/rc.conf
echo 'nfsv4_server_only="YES"' >> /etc/rc.conf
echo 'nfsuserd_enable="YES"' >> /etc/rc.conf
echo 'nfsuserd_flags="-domain mydomain.name"' >> /etc/rc.conf
echo 'nfs_server_flags="-u -t -h 10.102.2.2"' >> /etc/rc.conf
echo 'mountd_enable="YES"' >> /etc/rc.conf

echo '# Enable Linux clients using UID instead of name (10.1-RELEASE and up only)' >> /etc/sysctl.conf
echo 'vfs.nfsd.enable_stringtouid=1' >> /etc/sysctl.conf
sysctl vfs.nfsd.enable_stringtouid=1

################################################################################
# Configure the /etc/exports file for NFSv4 mounts. This won't be required if
# not using NFSv4 and only the next two commands would apply.
# http://forums.freebsd.org/showthread.php?p=135531
################################################################################

echo 'V4: / -sec=sys -network 10.0.0.0 -mask 255.0.0.0' >> /etc/exports

################################################################################
# Enable the 'sharenfs' property on the ZFS set and sharing of /usr/home
# Be aware of the security implications of using "-maproot=root".
#
# This is mainly to make sure root on the Linux NFS clients can read the
# .encfs6.xml file used by my EncFS home directors and easily change
# permissions.
################################################################################

zfs set sharenfs='-network 10.0.0.0 -mask 255.0.0.0 -maproot=root' zroot/homedirs

################################################################################
# Start & control NFS servers
#
# For NFSv4, all services can be completely stopped with:
# service nfsd stop ; service mountd stop ; service rpcbind stop ; service nfsuserd stop
# All services can be started with:
# service nfsd start ; service nfsuserd start
#
# For NFSv2/v3, all services can be completely stopped with:
# service statd stop ; service lockd stop ; service nfsd stop ; service mountd stop ; service rpcbind stop
# All services can be started with:
# service rpcbind start && service mountd start && service nfsd start && service lockd start
#
# For all NFS versions, if the '/etc/exports' is changed it can be refreshed by:
# service mountd reload
#
# Changing `zfs set sharenfs...` automatically does this and will update
# the '/etc/zfs/exports' file for you.
#
################################################################################

service nfsd start ; service nfsuserd start

################################################################################
##----------------------------------------------------------------------------##
##                    Configure Host System SMB Support                       ##
##----------------------------------------------------------------------------##
################################################################################
# Enable jail friendly SMB support with Samba.
#
# With Samba 4.12+, encryption will not be a speed hit so require it
# https://blog.cryptomilk.org/2019/10/02/samba-and-gnutls/
################################################################################

pkg install samba413

cat > /usr/local/etc/smb4.conf << 'EOF'
[global]
    hosts allow = 10.
    bind interfaces only = yes
    case sensitive = yes
    security = user
    smb encrypt = required

    unix extensions = no
    nt acl support = yes
    inherit acls = no
    map acl inherit = yes

[homedirs]
    path = /zfs/homedirs
    comment = Home Directories
    vfs objects = zfsacl
    nfs4:mode = special
    nfs4:acedup = merge
    nfs4:chown = yes
    available = yes
    browseable = yes
    read only = no
    public = no
    guest ok = no
    writable = yes
'EOF'

sysrc samba_server_enable=YES
service samba_server start

################################################################################
##----------------------------------------------------------------------------##
##                      Poudriere PKG Build Configuration                     ##
##----------------------------------------------------------------------------##
################################################################################
# Set Up Poudriere PKG build system now that ZFS is fully setup.  All jails will
# be mapped to a local folder as their repository and the FTP jail will also 
# share this package repo to the internal network. Once testing for a jail is
# done, the idea is to migrate the packages and configuration into Poudriere and
# do pkg upgrade in the future rather than compiling software in each jail.
#
# Helpful Links:
# http://forums.freebsd.org/showthread.php?t=38859
# http://blog.etoilebsd.net/post/Home_made_pkgng_repo
# https://fossil.etoilebsd.net/poudriere/doc/trunk/doc/pkgng_repos.wiki
################################################################################

# Install Poudriere
pkg install poudriere-devel

# Install ccache
pkg install ccache

# Backup and change default configuration variables
cd /usr/local/etc && cp poudriere.conf.sample poudriere.conf
sed -i '' -e 's^.*ZPOOL=.*^ZPOOL=zroot^' poudriere.conf
sed -i '' -e 's^.*FREEBSD_HOST=.*^FREEBSD_HOST=http://ftp.freebsd.org^' poudriere.conf
sed -i '' -e 's^.*BUILD_AS_NON_ROOT=.*^BUILD_AS_NON_ROOT=yes^' poudriere.conf

# Enable ccache
install -o nobody -g nogroup -d /usr/obj/ccache
sed -i '' -e 's^.*CCACHE_DIR=.*^CCACHE_DIR=/usr/obj/ccache^' poudriere.conf

# Remove current ports tree and set Poudriere to use existing ports repo
rm -r /usr/ports/*
poudriere ports -c -F -f none -M /usr/ports -p default

# Setup 13-CURRENT build environment
poudriere jail -c -j 13xamd64 -v 13.0-CURRENT -a amd64 -m src=/usr/src

# Setup 12.2-RELEASE build environments
poudriere jail -c -j 122amd64 -v 12.2-RELEASE -a amd64 -m http
poudriere jail -c -j 122i386 -v 12.2-RELEASE -a i386 -m http

# Setup 11.4-RELEASE build environments
poudriere jail -c -j 114amd64 -v 11.4-RELEASE -a amd64 -m http
poudriere jail -c -j 114i386 -v 11.4-RELEASE -a i386 -m http

# Additional info on setup for build environments for cross building ports
# http://blogs.freebsdish.org/brd/2015/08/25/building-arm-packages-with-poudriere-the-simple-way/
#pkg install qemu-user-static
#sysrc qemu_user_static_enable=YES
#service qemu_user_static start
#poudriere jail -c -j 120armv6 -v head -a arm.armv6 -m svn+https

# Setup make.conf variables for build jail
cat > /usr/local/etc/poudriere.d/make.conf << 'EOF'
multimedia_ffmpeg_SET+=RTMP X11GRAB FAAC LAME AMR_NB AMR_WB ASS
security_gnutls_UNSET+=TPM
www_nginx_SET+=PASSENGER HTTP_FANCYINDEX
'EOF'

# Setup a package list of all ports used on host and in jails
cat > /usr/local/etc/poudriere.d/pkg_list << 'EOF'
########## Host and Jail programs ##########
ports-mgmt/pkg
#ports-mgmt/pkg-devel
ports-mgmt/poudriere-devel
www/nginx-lite
devel/ccache
emulators/qemu-user-static
ports-mgmt/dialog4ports
ports-mgmt/portlint
security/vuxml
devel/rclint
textproc/igor
sysutils/tmux
shells/bash
shells/zsh
shells/fish
dns/unbound
mail/dma
security/openvpn
sysutils/pstree
net-mgmt/iftop
sysutils/cmdwatch
sysutils/tree
security/clamav
editors/vim-console
devel/checkbashisms
sysutils/ipmitool
sysutils/nut
security/logcheck
sysutils/panicmail
sysutils/devcpu-data
net/ladvd
sysutils/smartmontools
sysutils/ncdu
sysutils/duff
misc/mbuffer
net/rsync
net/unison@nox11
sysutils/zfs-stats
sysutils/zfstools
sysutils/beadm
net/samba412
net/samba413
sysutils/iocage
security/sudo
benchmarks/iperf
shells/mksh
sysutils/dtrace-toolkit
mail/mutt
irc/irssi
########## Serviio Jail ##########
net/serviio
graphics/dcraw
########## Unifi Jail ##########
net-mgmt/unifi5
########## Foreman Jail ##########
devel/git
devel/ruby-gems
devel/rubygem-rake
www/nginx
www/rubygem-passenger@nginx
sysutils/rubygem-bundler
devel/libvirt
textproc/libxslt
www/node12
www/npm-node12
databases/postgresql12-server
databases/postgresql12-client
net/foreman-proxy
devel/rubygem-dynflow
sysutils/rubygem-smart_proxy_dynflow
ftp/tftp-hpa
########## Salt Jail ##########
sysutils/py-salt
sysutils/rubygem-smart_proxy_salt
devel/py-setproctitle
sysutils/lsyncd
########## Graylog Jail ##########
sysutils/graylog
textproc/elasticsearch6
databases/mongodb36
sysutils/pwgen
'EOF'

# Allow host to install from Poudriere Repo
mkdir -p /usr/local/etc/pkg/repos
cat > /usr/local/etc/pkg/repos/myrepo.conf << 'EOF'
myrepo: {
  url: "http://10.102.2.2/pkgrepo/13xamd64-default",
  enabled: yes
}
FreeBSD: {
  enabled: no
}
'EOF'

# - To update a jail with latest security patches but stay at the same version:
# poudriere jail -u -j jailname
# - To upgrade the CURRENT jails using SVN after they were built:
# poudriere jail -u -j 110amd64 && poudriere jail -u -j 110i386

# Optional Patch to add link to local package repo on Poudriere index page
cat > /home/jason/poudriere-index.patch << 'EOF'
--- /usr/local/share/poudriere/html/index.html	2014-09-27 01:12:10.000000000 +0000
+++ /usr/local/share/poudriere/html/index.html	2014-09-27 01:18:53.000000000 +0000
@@ -28,6 +28,7 @@
 							<ul class="nav navbar-nav nav-pills pull-left">
 								<li><a title="top" href="#top"><span class="glyphicon glyphicon-chevron-up"></span></a></li>
 								<li><a href="#latest_builds">Latest Builds</a></li>
+								<li><a href="pkgrepo/"><span class="glyphicon glyphicon-share-alt"></span>Local Package Repository</a></li>
 								<li class="dropdown">
 									<a href="#" class="dropdown-toggle" data-toggle="dropdown">Logs <b class="caret"></b></a>
 									<ul class="dropdown-menu">
'EOF'
patch < /home/jason/poudriere-index.patch
pkg check -r poudriere-devel

# Cron entries to automate
echo 'MAILTO=jason' >> /var/cron/tabs/root
echo 'PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin' >> /var/cron/tabs/root
printf "0\t13\t*\t*\tmon\tnice poudriere bulk -f /usr/local/etc/poudriere.d/pkg_list -j 114amd64; nice poudriere bulk -f /usr/local/etc/poudriere.d/pkg_list -j 114i386\n" >> /var/cron/tabs/root
printf "0\t13\t*\t*\ttue,thu\tnice poudriere bulk -f /usr/local/etc/poudriere.d/pkg_list -j 122amd64; nice poudriere bulk -f /usr/local/etc/poudriere.d/pkg_list -j 122i386\n" >> /var/cron/tabs/root
printf "0\t13\t*\t*\twed,fri,sat,sun\tnice poudriere bulk -f /usr/local/etc/poudriere.d/pkg_list -j 13xamd64\n" >> /var/cron/tabs/root

# Helpful testing scripts
cat > /home/jason/bin/bulkall.sh << 'EOF'
#!/bin/sh
port=$1
for jail in $(poudriere jail -lnq | sort -n); do
	if [ -z $port ]; then
		poudriere bulk -j $jail -f /usr/local/etc/poudriere.d/pkg_list
	elif [ -d /usr/ports/$port ]; then
		poudriere bulk -j $jail $port
	else
		echo "$port does not exist in /usr/ports/$port"
	fi
'EOF'

cat > /home/jason/bin/testportall.sh << 'EOF'
#!/bin/sh
port=$1
for jail in $(poudriere jail -lnq | sort -n); do
	poudriere testport -j $jail -o $port
done
'EOF'

################################################################################
# Poudriere package serving on host
################################################################################

pkg install nginx-lite

cat > /usr/local/etc/nginx/nginx.conf << 'EOF'
worker_processes 2;

events {
    worker_connections  1024;
}

http {
	include            mime.types;
	default_type       application/octet-stream;
	sendfile           on;
	tcp_nopush         on;
	keepalive_timeout  65;
	tcp_nodelay        on;

        # Allow gzipping js, css, log, svg and json files.
        gzip on;
        gzip_http_version 1.0;
        gzip_comp_level 6;
        gzip_proxied any;
        gzip_min_length  1100;
        gzip_buffers 16 8k;
        gzip_types text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript image/gif image/jpeg image/png application/json image/svg+xml;

        types {
                text/plain                            log;
        }

    server {
        listen       80 accept_filter=httpready reuseport;
        listen       [::]:80 accept_filter=httpready reuseport;
        server_name  xts-bsd.pa-us.mydomain.name xts-bsd;
        root         /usr/local/share/poudriere/html;

        # Allow caching static resources
        location ~* ^.+\.(jpg|jpeg|gif|png|ico|svg|woff|css|js|html)$ {
            add_header Cache-Control "public";
            expires 2d;
        }

        location /pkgrepo {
            alias        /zfs/poudriere/data/packages;
            autoindex   on;
        }

        location /data {
            alias /zfs/poudriere/data/logs/bulk;

            # Allow caching dynamic files but ensure they get rechecked
            location ~* ^.+\.(log|txz|tbz|bz2|gz)$ {
                add_header Cache-Control "public, must-revalidate, proxy-revalidate";
            }

            # Don't log json requests as they come in frequently and ensure
            # caching works as expected
            location ~* ^.+\.(json)$ {
                add_header Cache-Control "public, must-revalidate, proxy-revalidate";
                access_log off;
                log_not_found off;
            }

            # Allow indexing only in log dirs
            location ~ /data/?.*/(logs|latest-per-pkg)/ {
                autoindex   on;
            }

            break;
        }
    }
}
'EOF'

# enable/start
sysrc nginx_enable=YES
service nginx start

################################################################################
##----------------------------------------------------------------------------##
##                    Host System Initial Jail Configuration                  ##
##----------------------------------------------------------------------------##
################################################################################

pkg install py37-iocage
iocage activate zroot

# Persistance configuration for VIMAGE
cat >> /etc/rc.conf << 'EOF'
# Bridges for VIMAGE jails
cloned_interfaces="bridge0 bridge1"
ifconfig_bridge0="addm em0 up"
ifconfig bridge1="addm em1 up"
'EOF'

# Make the bridges now
ifconfig bridge0 create
ifconfig bridge1 create
ifconfig bridge0 addm em0 up
ifconfig bridge1 addm em1 up

# Enable jails in rc.conf
echo '' >> /etc/rc.conf
echo '# Iocage Config' >> /etc/rc.conf
echo 'iocage_enable="YES"' >> /etc/rc.conf
echo 'fdescfs /dev/fd fdescfs rw 0 0' >> /etc/fstab

# Put commented block for enabling raw sockets in sysctl.conf if needed later on
echo '' >> /etc/sysctl.conf
echo '# Uncomment to allow pings within a jail on upon reboot' >> /etc/sysctl.conf
echo '#security.jail.allow_raw_sockets=1' >> /etc/sysctl.conf

################################################################################
# Customize configs in jail template
################################################################################

# Fetch release and set defaults
iocage fetch -r 12.2-RELEASE

# Set for centralized syslog
perl -pwi -e 's^#*.*\t\t\t\t\t\t\@loghost^*.*\t\t\t\t\t\t\@10.102.2.2^g' /zroot/iocage/releases/12.2-RELEASE/root/etc/syslog.conf

# Set up remaining baseline for all jail's rc.conf
cat > /zroot/iocage/releases/12.2-RELEASE/root/etc/rc.conf << 'EOF'
syslogd_flags="-s -v -v"
sshd_enable="YES"
clear_tmp_enable="YES"

# Disable Sendmail by default
sendmail_enable="NONE"
sendmail_submit_enable="NO"
sendmail_outbound_enable="NO"
sendmail_msp_queue_enable="NO"

# Enable IPv6
ipv6_activate_all_interfaces="YES"
# XXX: iocage version -- Version 1.0 RELEASE 2018/12 -- still needs this
# set else the interface ends up in IFDISABLED without ACCEPT_RTADV set
ifconfig_epair0b_ipv6="inet6 accept_rtadv"
ifconfig_epair1b_ipv6="inet6 accept_rtadv"
'EOF'

# Configure baseline periodic.conf for all jail templates.
# periodic.conf.local will be used for any things specific to one jail only.
cat >> /zroot/iocage/releases/12.2-RELEASE/root/etc/periodic.conf << 'EOF'
daily_output="/var/log/daily.log"
weekly_output="/var/log/weekly.log"
monthly_output="/var/log/monthly.log"
daily_status_security_output="/var/log/daily_status_security.log"
daily_status_network_enable="NO"
daily_status_uptime_enable="NO"
daily_status_world_kernel="NO"
daily_status_security_ipfwlimit_enable="NO"
daily_status_security_ipfwdenied_enable="NO"
weekly_whatis_enable="NO"
##### General formatting for all jails
daily_show_success="NO"
security_show_success="NO"
daily_status_security_inline="YES"
weekly_status_security_inline="YES"
monthly_status_security_inline="YES"
##### Remove non-essential checks for all jails
daily_status_disks_enable="NO"
daily_status_rwho_enable="NO"
daily_status_security_kernelmsg_enable="NO"
##### Checks to enable for all jails
daily_clean_tmps_enable="YES"
daily_status_security_pkg_checksum_enable="YES"
'EOF'

mkdir -p /zroot/iocage/releases/12.2-RELEASE/root/usr/local/etc/pkg/repos/
cat >> /zroot/iocage/releases/12.2-RELEASE/root/usr/local/etc/pkg/repos/myrepo.conf << 'EOF'
myrepo: {
  url: "http://10.102.2.2/pkgrepo/122amd64-default",
  enabled: yes
}
FreeBSD: {
  enabled: no
}
'EOF'

################################################################################
# Quick script to display all periodic log files in all running jails.
################################################################################

cat > /usr/local/etc/periodic/daily/999.jail-periodic-daily << 'EOF'
#!/bin/sh
#
# /usr/local/etc/periodic/daily/999.jail-periodic-daily 2014-02-01
#

# If there is a global system configuration file, suck it in.
#
if [ -r /etc/defaults/periodic.conf ]
then
    . /etc/defaults/periodic.conf
    source_periodic_confs
fi

: ${daily_jail_periodic_ignore_length="0"}

case "$daily_jail_periodic_enable" in
    [Yy][Ee][Ss])
        paths=`jls -n path | cut -f 2 -d '='`
        for path in $paths; do
            if [ -f ${path}/var/log/daily.log ]; then
                LENGTH=`grep -vc newsyslog ${path}/var/log/daily.log`
                if [ $LENGTH -ne $daily_jail_periodic_ignore_length ]; then
                    echo ""
                    echo "daily periodic log in $path"
                    grep -v newsyslog ${path}/var/log/daily.log
                fi
            fi
        done && rc=1
        ;;
    *)
        rc=0
        ;;
esac

exit $rc
'EOF'

perl -p -e 's/daily/weekly/g' /usr/local/etc/periodic/daily/999.jail-periodic-daily > /usr/local/etc/periodic/weekly/999.jail-periodic-weekly
perl -p -e 's/daily/monthly/g' /usr/local/etc/periodic/daily/999.jail-periodic-daily > /usr/local/etc/periodic/monthly/999.jail-periodic-monthly

chmod 555 /usr/local/etc/periodic/daily/999.jail-periodic-daily
chmod 555 /usr/local/etc/periodic/weekly/999.jail-periodic-weekly
chmod 555 /usr/local/etc/periodic/monthly/999.jail-periodic-monthly

cat >> /etc/periodic.conf << 'EOF'
##### Show jail periodic checks in host periodic
daily_jail_periodic_enable="YES"
daily_jail_periodic_ignore_length="4"
weekly_jail_periodic_enable="YES"
weekly_jail_periodic_ignore_length="4"
monthly_jail_periodic_enable="YES"
'EOF'

################################################################################
# VIMAGE test jail
################################################################################

iocage create -n test-jail12 -r 12.2-RELEASE
iocage set vnet=on \
  interfaces='vnet0:bridge0' \
  ip4_addr="vnet0|192.168.102.50/24" \
  defaultrouter="192.168.102.1" \
  ip6_addr="vnet0|accept_rtadv" test-jail12
iocage start test-jail12
iocage console test-jail12

################################################################################
# Snippet that applies after creation of each jail
################################################################################

pkg install py37-salt
sysrc salt_minion_enable=YES
cat > /usr/local/etc/salt/minion << 'EOF'
grains:
  roles:
    - infra
'EOF'
service salt_minion start

################################################################################
##----------------------------------------------------------------------------##
##              Foreman on Nginx/Passenger Jail Configuration                 ##
##----------------------------------------------------------------------------##
################################################################################
# References:
# http://docs.puppetlabs.com/guides/installation.html
# https://help.ubuntu.com/11.04/serverguide/puppet.html
# http://daemon-notes.com/articles/network/postgresql
#
# All configuration files will be under /usr/local/etc/puppet
# All state files are under /var/puppet
################################################################################

iocage create -n foreman-122 -r 12.2-RELEASE
iocage set vnet=on boot="on" \
  interfaces='vnet1:bridge1' \
  ip4_addr="vnet1|10.102.2.11/24" \
  defaultrouter='10.102.2.1' \
  ip6_addr="vnet1|accept_rtadv" \
  allow_sysvipc=1 foreman-122
iocage start foreman-122
iocage console foreman-122

# Set baseline environment
passwd

sysrc hostname='foreman.pa-us.mydomain.name'
sysrc defaultrouter="10.102.2.1" && route add default 10.102.2.1
hostname foreman.pa-us.mydomain.name

pkg install bash zsh tmux vim-console pstree cmdwatch tree

#
# PART 1: Database config
#

# Install PostgreSQL with default options
pkg install postgresql12-server

cat >> /etc/login.conf << 'EOF'
postgres:\
	:lang=en_US.UTF-8:\
	:setenv=LC_COLLATE=C:\
	:tc=default:
'EOF'
cap_mkdb /etc/login.conf

# Enable and start PostgreSQL
sysrc postgresql_enable="YES"
sysrc postgresql_class="postgres"
service postgresql initdb
service postgresql start

sysrc -f /etc/periodic.conf.local daily_pgsql_backup_enable="YES"
sysrc -f /etc/periodic.conf.local daily_pgsql_vacuum_enable="YES"

# Create users and databases
su - postgres
createuser -sdrP admin

# Generate random passwords for each database
dd if=/dev/urandom bs=32 count=1 | openssl base64 | cut -b -32

# Foreman
createuser foreman
createdb -O foreman -e foreman_test
createdb -O foreman -e foreman_dev
createdb -O foreman -e foreman
psql -c "ALTER USER foreman WITH ENCRYPTED PASSWORD 'foreman_password'"

# ADMIN NOTES: Restoring from a backup
su - postgres
cd /var/db/postgres/backups
# Restore 1
pg_restore --dbname=<db> pgdump_<db>_<date>
# Restore all (example for backups on 2015-01-10)
gunzip -c pgglobals_2015-01-10T03:01:34.gz | psql
dropdb foreman
createdb -T template0 foreman
pg_restore --dbname=foreman pgdump_foreman_2015-01-10T03:01:34

#
# PART 2: Foreman config
#

pkg install git nginx rubygem-passenger-nginx postgresql12-client sudo foreman-proxy

# Manually create the 'foreman' user
pw groupadd -n foreman -g 813
pw useradd -n foreman -c "The Foreman,,," -u 813 -g foreman -d /opt/foreman -s /usr/sbin/nologin

# Installing Foreman from Git
mkdir /opt
cd /opt
git clone https://github.com/theforeman/foreman.git -b 1.24-stable
cd foreman
cp config/settings.yaml.example config/settings.yaml

# Enable download of Foreman Salt Plugin (1.24 supporting version),
# Foreman-tasks (1.0 is for Foreman 2.0 per support matrix), and
# Foreman_remote_exeecution (2.0 is for foreman 1.24 per code)
echo "gem 'foreman_salt', '~> 13.2'" > bundler.d/Gemfile.local.rb
echo "gem 'foreman-tasks', '~> 0.17.0'" >> bundler.d/Gemfile.local.rb
echo "gem 'foreman_remote_execution', '~> 2.0'" >> bundler.d/Gemfile.local.rb

# install rubygems components and dependent libraries for first part of install
pkg install rubygem-bundler rubygem-rake libvirt libxslt
bundle config --local build.ruby-libvirt --with-libvirt-include=/usr/local/include/libvirt --with-libvirt-lib=/usr/local/lib/libvirt
bundle config --local build.nokogiri --use-system-libraries --with-xml2-include=/usr/local/include/libxml2 --with-xml2-lib=/usr/local/lib
bundle config --local path 'vendor'
bundle config --local without 'journald mysql2 sqlite test'
bundle install

# install node/npm for second part of install
pkg install node12 npm-node12
# modify so nginx can find javascript runtime
sed -i '' -e 's|"node"|"/usr/local/bin/node"|' vendor/ruby/2.6/gems/execjs-2.7.0/lib/execjs/runtimes.rb
npm install

# database.yml:  Copy the example database YAML file. Update with database information.
cd /opt/foreman/config
cat > database.yml << 'EOF'
# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  adapter: postgresql
  database: foreman_test
  username: foreman
  password: foreman_password
  host: localhost

development:
  adapter: postgresql
  database: foreman_dev
  username: foreman
  password: foreman_password
  host: localhost

production:
  adapter: postgresql
  database: foreman
  username: foreman
  password: foreman_password
  host: localhost
'EOF'

# Configure email server settings
cat > email.yaml << 'EOF'
# Outgoing email settings

production:
  delivery_method: :smtp
  smtp_settings:
    address: 10.102.2.2
    port: 25
    domain: mydomain.name
    authentication: :none
'EOF'

# Gen SSL keys
openssl req -newkey rsa:4096 -nodes -keyout foreman.key -x509 -days 1095 -out foreman.crt

# Update settings.yaml file
cat > settings.yaml << 'EOF'
---
# You must restart the Rack server after changing either of these values
# because they are cached at startup.
:unattended: true
:login: true
:require_ssl: false
:support_jsonp: false
:mark_translated: false
:hsts_enabled: false
:ssl_ca_file: ""
:ssl_certificate: /opt/foreman/config/foreman.crt
:ssl_priv_key: /opt/foreman/config/foreman.key
:websockets_ssl_cert: /opt/foreman/config/foreman.crt
:websockets_ssl_key: /opt/foreman/config/foreman.key
'EOF'

# Update access perms on these files
chmod 640 settings.yaml database.yml foreman.key foreman.crt

# Setup production database
cd /opt/foreman
env RAILS_ENV=production bundle exec rake db:migrate
# XXX: need to rename file due to bug and re-run db:seed after, else there will be
# an error on 'ActiveRecord::RecordNotFound: Couldn't find JobTemplate'
mv ./vendor/ruby/2.6/gems/foreman_salt-13.2.4/app/views/foreman_salt/job_templates/salt_run_state_highstate_-_ssh_default.erb ./vendor/ruby/2.6/gems/foreman_salt-13.2.4/app/views/foreman_salt/job_templates/salt_run_state_highstate_-_ssh_default.erb_
env RAILS_ENV=production bundle exec rake db:seed
mv ./vendor/ruby/2.6/gems/foreman_salt-13.2.4/app/views/foreman_salt/job_templates/salt_run_state_highstate_-_ssh_default.erb_ ./vendor/ruby/2.6/gems/foreman_salt-13.2.4/app/views/foreman_salt/job_templates/salt_run_state_highstate_-_ssh_default.erb
env RAILS_ENV=production bundle exec rake db:seed
env RAILS_ENV=production bundle exec rake apipie:cache
env RAILS_ENV=production bundle exec rake assets:precompile
# XXX: npm probably didn't install packages needed so webpack compile will fail
npm install humanize-duration react-html-parser
env RAILS_ENV=production bundle exec rake webpack:compile
env RAILS_ENV=production bundle exec rake locale:pack

# Fix permissions on everything so far
mkdir /opt/foreman/tmp
chgrp -R foreman /opt/foreman
find /opt/foreman/tmp -type d -exec chmod g+rw {} \;
find /opt/foreman/tmp -type f -exec chmod g+rw {} \;
find /opt/foreman/log -type d -exec chmod g+rw {} \;
find /opt/foreman/log -type f -exec chmod g+rw {} \;

# Running Foreman on a Production-Quality Server
# Configuring Nginx and Passenger
# Nginx/Passenger Instructions and Configuration was derived from these two examples 
# that refer to how to set it up on CentOS
#
# http://z0mbix.github.io/blog/2012/03/01/use-nginx-and-passenger-to-power-your-puppet-master/
# http://www.watters.ws/mediawiki/index.php/Configure_puppet_master_using_nginx_and_mod_passenger

mkdir /usr/local/etc/nginx/sites-enabled
mkdir /usr/local/etc/nginx/sites-available

cat > /usr/local/etc/nginx/nginx.conf << 'EOF'
user              www www;
worker_processes  2;
error_log         /var/log/nginx/error.log notice;
pid               /var/run/nginx.pid;

load_module       /usr/local/libexec/nginx/ngx_http_passenger_module.so;

events {
    worker_connections  1024;
}

http {
    include                  /usr/local/etc/nginx/sites-enabled/*;

    passenger_root           /usr/local/lib/ruby/gems/2.6/gems/passenger-6.0.6/;
    passenger_ruby           /usr/local/bin/ruby26;
    passenger_max_pool_size  10;
    passenger_pool_idle_time 300;
    passenger_sticky_sessions on;
    passenger_friendly_error_pages on;

    include            mime.types;
    default_type       application/octet-stream;
    sendfile           on;
    tcp_nopush         on;
    keepalive_timeout  65;
    tcp_nodelay        on;

    # Allow gzipping js, css, log, svg and json files.
    gzip on;
    gzip_http_version 1.0;
    gzip_comp_level 6;
    gzip_proxied any;
    gzip_min_length  1100;
    gzip_buffers 16 8k;
    gzip_types text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript image/gif image/jpeg image/png application/json image/svg+xml;

    types {
        text/plain                            log;
    }

    ssl_session_cache          off;
    ssl_session_tickets        off;
    ssl_protocols              TLSv1.3 TLSv1.2;
    ssl_ciphers                TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256;
}
'EOF'

# Create sites-available config file and follow up with sites-enabled symlink
cat > /usr/local/etc/nginx/sites-available/foreman << 'EOF'
    server {
        listen       80 default_server accept_filter=httpready reuseport;
        listen       [::]:80 default_server accept_filter=httpready reuseport;
        server_name  foreman.pa-us.mydomain.name foreman;

        passenger_enabled          on;
        passenger_user             foreman;
        passenger_group            foreman;

        access_log                 /var/log/nginx/foreman_http_access.log;
        root                       /opt/foreman/public;
    }
    server {
        listen       443 ssl http2 accept_filter=dataready reuseport;
        listen       [::]:443 ssl http2 accept_filter=dataready reuseport;
        server_name  foreman.pa-us.mydomain.name foreman;

        passenger_enabled          on;
        passenger_set_header       X_CLIENT_S_DN $ssl_client_s_dn;
        passenger_set_header       X_CLIENT_VERIFY $ssl_client_verify;
        passenger_user             foreman;
        passenger_group            foreman;

        access_log                 /var/log/nginx/foreman_https_access.log;
        root                       /opt/foreman/public;
        ssl_certificate            /opt/foreman/config/foreman.crt;
        ssl_certificate_key        /opt/foreman/config/foreman.key;
        ssl_client_certificate     /opt/foreman/config/foreman.crt;
    }
'EOF'
cd /usr/local/etc/nginx/sites-enabled && ln -s ../sites-available/foreman foreman

# Enable a daily log file rotation via newsyslog.conf
mkdir -p /usr/local/etc/newsyslog.conf.d
printf "/var/log/nginx/*.log\t\t\t644  7\t   *    @T00  JG    /var/run/nginx.pid  30\n" >> /usr/local/etc/newsyslog.conf.d/nginx.conf

# Enable and start dynflow workers for async tasks
# XXX pidfile check fails
cat > /usr/local/etc/rc.d/foreman-tasks << 'EOF'
#!/bin/sh

# PROVIDE: foreman-tasks
# BEFORE: nginx
#
. /etc/rc.subr

name="foreman_tasks"
rcvar="foreman_tasks_enable"

command="/usr/local/bin/bundle"
command_interpreter="/usr/local/bin/ruby26"
command_args="exec ruby vendor/ruby/2.6/gems/foreman-tasks-0.17.6/bin/dynflow-executor start"

foreman_tasks_env="RAILS_ENV=production"
foreman_tasks_chdir="/opt/foreman"
foreman_tasks_enable=${foreman_tasks_enable:-"NO"}
foreman_tasks_user=${foreman_tasks_user-"foreman"}
load_rc_config "${name}"

run_rc_command "$1"
'EOF'

chmod 555 /usr/local/etc/rc.d/foreman-tasks
sysrc foreman_tasks_enable=YES
service foreman-tasks start

# Enable nginx service and start it. At this point basic functionality is online.
sysrc nginx_enable=YES
service nginx start

cd /usr/local/etc/foreman-proxy
cat > settings.yml << 'EOF'
---
:enabled: http
:foreman_url: http://foreman.pa-us.mydomain.name
:daemon: true
:bind_host: ['0.0.0.0','::']
:http_port: 8000
:virsh_network: default
'EOF'

sysrc foreman_proxy_enable=YES
service foreman-proxy start
# XXX: cannot load such file -- logging (LoadError) -- needs rubygem-logging dep upstreamed

# And cron jobs for everything else
touch /var/log/foreman-cron.log
chown foreman:wheel /var/log/foreman-cron.log
cat > /var/cron/tabs/foreman << 'EOF'
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
RAILS_ENV=production
FOREMAN_HOME=/opt/foreman
# Clean up the session entries in the database
15 23 * * *     bundle exec rake db:sessions:clear >/var/log/foreman-cron.log 2>&1
# Send out daily summary
0 7 * * *       bundle exec rake reports:summarize >/var/log/foreman-cron.log 2>&1
# Expire old reports
30 7 * * *      bundle exec rake reports:expire >/var/log/foreman-cron.log 2>&1
# Collects trends data
*/30 * * * *    bundle exec rake trends:counter >/var/log/foreman-cron.log 2>&1
# Remove duplicate trends data
0 8 * * *       bundle exec rake trends:clean >/var/log/foreman-cron.log 2>&1
'EOF'

# Foreman Upgrade Process
# Step 1: Prep for upate
rm /usr/local/etc/nginx/sites-enabled/foreman
service nginx reload
cd /opt/foreman

# Step 2a: Minor Updates (Example: 1.22.1 to 1.22.2)
git reset --hard HEAD
git pull
bundle update
npm update

# Foreman Upgrade Process
# Step 2b: Major Updates (Example: 1.22.x to 1.23.x)
git pull
git checkout 1.23-stable
rm -r vendor/ruby node_modules
rm Gemfile.lock package-lock.json
# verify bundler.d/Gemfile.local.rb versions and update if needed
bundle config --local build.ruby-libvirt --with-libvirt-include=/usr/local/include/libvirt --with-libvirt-lib=/usr/local/lib/libvirt
bundle config --local build.nokogiri --use-system-libraries --with-xml2-include=/usr/local/include/libxml2 --with-xml2-lib=/usr/local/lib
bundle install --path vendor --without journald mysql2 sqlite test
sed -i '' -e 's|"node"|"/usr/local/bin/node"|' vendor/ruby/2.6/gems/execjs-2.7.0/lib/execjs/runtimes.rb
npm install

# Step 3: Database updates/content generation for both minor/major updates
# Optional step database backup before any database migration
su - postgres
cd /var/db/postgres/backups
pg_dump -Fc foreman > $(/bin/date "+%Y%m%d")-foreman1.22.dump
exit
# Required database updates/content generation
env RAILS_ENV=production bundle exec rake db:migrate
env RAILS_ENV=production bundle exec rake db:seed
env RAILS_ENV=production bundle exec rake apipie:cache
env RAILS_ENV=production bundle exec rake assets:precompile
env RAILS_ENV=production bundle exec rake webpack:compile
env RAILS_ENV=production bundle exec rake locale:pack
# Step 4: Fix Permissions
chgrp -R foreman /opt/foreman
find /opt/foreman/tmp -type d -exec chmod g+rw {} \;
find /opt/foreman/tmp -type f -exec chmod g+rw {} \;
find /opt/foreman/log -type d -exec chmod g+rw {} \;
find /opt/foreman/log -type f -exec chmod g+rw {} \;
# Step 5: Enable site and restart Nginx
cd /usr/local/etc/nginx/sites-enabled && ln -s ../sites-available/foreman foreman
service nginx reload

#
# PART 3: TFTP config
#

pkg install tftp-hpa

# Get syslinux-6.03
cd /root
fetch https://www.kernel.org/pub/linux/utils/boot/syslinux/syslinux-6.03.zip
mkdir syslinux-6.03
unzip -d syslinux-6.03 syslinux-6.03.zip

# Populate tftpboot directory with bare minimum files needed from syslinux package
mkdir -p /usr/local/tftp/images
mkdir -p /usr/local/tftp/pxelinux.cfg
cp -v \
	syslinux-6.03/bios/core/pxelinux.0 \
	syslinux-6.03/bios/core/lpxelinux.0 \
	syslinux-6.03/bios/gpxe/gpxelinux.0 \
	syslinux-6.03/bios/com32/chain/chain.c32 \
	syslinux-6.03/bios/com32/elflink/ldlinux/ldlinux.c32 \
	syslinux-6.03/bios/com32/lib/libcom32.c32 \
	syslinux-6.03/bios/com32/libutil/libutil.c32 \
	syslinux-6.03/bios/com32/menu/menu.c32 \
	syslinux-6.03/bios/com32/menu/vesamenu.c32 \
	syslinux-6.03/bios/com32/modules/reboot.c32 \
	syslinux-6.03/bios/memdisk/memdisk \
	/usr/local/tftp
# Get Ubuntu netboot installer
cd /usr/local/tftp
fetch http://archive.ubuntu.com/ubuntu/dists/bionic/main/installer-amd64/current/images/netboot/netboot.tar.gz
tar xvzf netboot.tar.gz
rm netboot.tar.gz
# Get mfsBSD images for testing
cd /usr/local/tftp/images
fetch https://mfsbsd.vx.sk/files/images/11/amd64/mfsbsd-11.2-RELEASE-amd64.img
fetch https://mfsbsd.vx.sk/files/images/12/amd64/mfsbsd-12.0-RELEASE-amd64.img

# Populate default configuration using the above
cat > /usr/local/tftp/pxelinux.cfg/default << 'EOF'
ui vesamenu.c32
menu title Network Boot Menu
# menu background <image.png>
timeout 100

label localboot
  menu label Boot from Hard Drive
  kernel chain.c32
  append hd0

label auto_ubuntu
  menu label Auto Kickstart Net Install Ubuntu 18.04
  kernel ubuntu-installer/amd64/linux
  append ks=http://kickstart.pa-us.mydomain.name/ubuntu.cfg initrd=ubuntu-installer/amd64/initrd.gz locale=en_US.UTF-8 console-setup/layoutcode=us quiet netcfg/get_hostname=

menu begin manual_ubuntu
	menu title Manual Net Install Ubuntu 18.04
	include ubuntu-installer/amd64/pxelinux.cfg/default
menu end

label mfsbsd64_12
  menu label Load mfsBSD 12.0-RELEASE amd64
  kernel memdisk
  initrd images/mfsbsd-12.0-RELEASE-amd64.img raw

label mfsbsd64_11
  menu label Load mfsBSD 11.2-RELEASE amd64
  kernel memdisk
  initrd images/mfsbsd-11.2-RELEASE-amd64.img raw

label reboot
  menu label Reboot
  kernel reboot.c32
'EOF'

# Enable and start tftpd
chmod -R +r /usr/local/tftp/*
sysrc tftpd_enable=YES
service tftpd start

# Populate initial Ubuntu kickstart file
mkdir /usr/local/www/kickstart
cat > /usr/local/www/kickstart/ubuntu.cfg << 'EOF'
# Language
lang en_US.UTF-8
langsupport en_US
# Keyboard
keyboard us
# Timezone
timezone America/New_York
# Text mode
text
# Install
install
# Reboot after install
reboot
# Users
rootpw --disabled
user jason --fullname "Jason Unovitch" --iscrypted --password <PASSWORD HASH HERE>
# Firewall off
firewall --disabled
network --bootproto=dhcp
# Partitioning
bootloader --location=mbr
zerombr yes
clearpart --all
part / --fstype=btrfs --size 1 --grow  --asprimary
part swap --size 8192
# Extra packages
preseed --owner ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula boolean true
%packages --resolvedeps --ignoremissing
@ Base
ubuntu-restricted-extras
software-properties-common
openssh-server
tmux
salt-minion

%post

mkdir -p /etc/salt
echo 'grains:'                      >> /etc/salt/minion
echo '  roles:'                     >> /etc/salt/minion
echo '    - desktop'                >> /etc/salt/minion
echo '    - nfs_client'             >> /etc/salt/minion

rm -f /etc/apt/apt.conf

%end
'EOF'

# Create sites-available config file and follow up with sites-enabled symlink
cat > /usr/local/etc/nginx/sites-available/kickstart << 'EOF'
    server {
        listen       80;
        listen       [::]:80;
        server_name  kickstart.pa-us.mydomain.name kickstart;

        access_log   /var/log/nginx/kickstart_access.log;
        root         /usr/local/www/kickstart;
        autoindex    on;
    }
    server {
        server_name kickstart.j.mydomain.name;
        rewrite ^/$ http://kickstart.pa-us.mydomain.name/ permanent;
        rewrite ^/(.*)$ http://kickstart.pa-us.mydomain.name/$1 permanent;
    }
'EOF'
cd /usr/local/etc/nginx/sites-enabled && ln -s ../sites-available/kickstart kickstart
service nginx reload

################################################################################
##                           Salt Master Server                               ##
################################################################################

iocage create -n salt01-122 -r 12.2-RELEASE
iocage set vnet=on \
  priority="90" boot="on" \
  interfaces='vnet1:bridge1' \
  ip4_addr="vnet1|10.102.2.13/24" \
  defaultrouter='10.102.2.1' \
  ip6_addr="vnet1|accept_rtadv" salt01-122
iocage start salt01-122
iocage console salt01-122

# Set baseline environment
passwd

sysrc hostname='salt01.pa-us.mydomain.name'
sysrc defaultrouter="10.102.2.1" && route add default 10.102.2.1
hostname salt01.pa-us.mydomain.name

pkg install bash zsh tmux vim-console pstree cmdwatch tree

# Install git
pkg install git

# Install and enable Salt
pkg install py37-salt py37-setproctitle
sysrc salt_master_enable=YES

# Create a Salt Master user
pw groupadd -n saltmaster -g 4505
pw useradd -n saltmaster -c "Salt Master Daemon,,," -u 4505 -g saltmaster -d /usr/local/etc/salt -s /sbin/nologin

# Create directory for Salt Master
install -o saltmaster -g saltmaster -d /var/log/salt
install -o saltmaster -g saltmaster -d /usr/local/etc/salt
install -o saltmaster -g saltmaster -d /usr/local/etc/salt.git
cd /usr/local/etc/salt.git
su -m saltmaster -c 'git --bare init'

cd /usr/local/etc/salt
su -m saltmaster -c 'git init'
su -m saltmaster -c 'git remote add origin file:///usr/local/etc/salt.git'
su -m saltmaster -c 'git push --set-upstream origin master'

# Set Salt Master to run as dedicated user
sed -i '' -e 's/#user:.*/user: saltmaster/' /usr/local/etc/salt/master

# Shrink noise of state output
sed -i '' -e 's/^state_output:.*/state_output: mixed/' -e 's/.*state_output:.*/state_output: mixed/' /usr/local/etc/salt/master

# Increase timeout on long running commands
sed -i '' -e 's/^timeout:.*/timeout: 60/' -e 's/^#timeout:.*/timeout: 60/' /usr/local/etc/salt/master

# Start Salt
service salt_master start

# Install Foreman Proxy and utilities
pkg install foreman-proxy rubygem-smart_proxy_salt sudo

# Configure Foreman Salt Proxy
cat > /usr/local/etc/foreman-proxy/settings.yml << 'EOF'
---
:enabled: http
:foreman_url: http://foreman.pa-us.mydomain.name
:daemon: true
:bind_host: ['0.0.0.0','::']
:http_port: 8000
:virsh_network: default
'EOF'
cat > /usr/local/etc/foreman-proxy/settings.d/salt.yml << 'EOF'
---
:enabled: true
:autosign_file: /usr/local/etc/salt/autosign.conf
:salt_command_user: saltmaster
'EOF'

# Give Foreman proxy the ability to run salt commands
echo 'Cmnd_Alias SALT = /usr/local/bin/salt, /usr/local/bin/salt-key' >> /usr/local/etc/sudoers.d/foreman_proxy
echo 'foreman_proxy ALL=(ALL) NOPASSWD: SALT' >> /usr/local/etc/sudoers.d/foreman_proxy
echo 'Defaults:foreman_proxy \!requiretty' >> /usr/local/etc/sudoers.d/foreman_proxy

# Make foreman_proxy a member of the Saltmaster group for read access to /usr/local/etc/salt
pw usermod foreman_proxy -G saltmaster

# Configure Foreman information for Smart Proxy
cat > /usr/local/etc/salt/foreman.yaml << 'EOF'
---
:proto: http
:host: foreman.pa-us.mydomain.name
:port: 80
:ssl_ca: ""
:ssl_cert: ""
:ssl_key: ""
:timeout:  10
:salt:  /usr/local/bin/salt
:upload_grains:  true
'EOF'

# Configure the Salt 'master' file per http://theforeman.org/plugins/foreman_salt/2.0/
# Then:
touch /usr/local/etc/salt/autosign.conf
chgrp foreman_proxy /usr/local/etc/salt/autosign.conf
chmod g+w /usr/local/etc/salt/autosign.conf

# Enable and Start the service
sysrc foreman_proxy_enable=YES
service foreman-proxy start

# Add to crontab to upload reports from SaltStack to Foreman
sed -i '' -e 's|^LOCK_FILE = .*|LOCK_FILE = "/var/run/salt/master/salt-report-upload.lock"|' /usr/local/sbin/upload-salt-reports
cat > /var/cron/tabs/saltmaster << 'EOF'
*/30 * * * * (/usr/local/bin/salt -b 25\% '*' state.highstate; nice /usr/local/sbin/upload-salt-reports) >> /var/log/salt/salt-cron.log 2>&1
'EOF'
chmod 600 /var/cron/tabs/saltmaster

# sync to secondary master server (idea from http://dapurberita.info/index.php/2019/03/19/install-lsyncd-freebsd-12/)
# MASTER
# * first generate needed ssh keys and ensure able to log in
# ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519
# SLAVE(S)
# * copy pub component to /root/.ssh/authorized_keys
# * enable login to root with ssh keys
sed -i '' -e 's/.*PermitRootLogin.*/PermitRootLogin without-password/' /etc/ssh/sshd_config
service sshd restart
# * install rsync only
pkg install rsync
# MASTER
#ssh <hostname> # ensure login works

# install lsyncd and rsync
pkg install lsyncd rsync

# configure lsyncd
cat > /usr/local/etc/lsyncd.conf << 'EOF'
settings {
  logfile    = "/var/log/lsyncd.log",
  statusFile = "/var/log/lsyncd.status",
  statusInterval = 1,
  maxProcesses = 2,
  insist = 1,
}
sync {
  default.rsync,
  delay = 0,
  source = "/usr/local/etc/salt",
  target = "10.82.2.13:/usr/local/etc/salt",
  exclude = {
    '/.ssh',
    '/last_uploaded',
    '/minion_id',
    '/minion.d',
    '/pki/minion',
    '*.sample',
    '*.swp',
    '*.tmp'
  },
  rsync = {
    binary = "/usr/local/bin/rsync",
    archive  = true,
    compress = true,
    verbose = true
  },
  delete = true
}
sync {
  default.rsync,
  delay = 0,
  source = "/usr/local/etc/salt-formulas",
  target = "10.82.2.13:/usr/local/etc/salt-formulas",
  rsync = {
    binary = "/usr/local/bin/rsync",
    archive  = true,
    compress = true,
    verbose = true
  },
  delete = true
}
'EOF'

# enable and start lsyncd
sysrc lsyncd_enable=YES
service lsyncd start

################################################################################
##                       Serviio Jail Configuration                           ##
################################################################################
# Helpful links:
# http://forums.nas4free.org/viewtopic.php?f=79&t=1796
# http://luffare.blogspot.com/2011/04/dlna-server-on-freebsd-82-using-serviio.html
# http://wiki.serviio.org/doku.php?id=build_ffmpeg_linux
################################################################################

iocage create -n serviio-122 -r 12.2-RELEASE
iocage set vnet=on boot="on" \
  interfaces='vnet1:bridge1' \
  ip4_addr="vnet1|10.102.2.14/24" \
  defaultrouter='10.102.2.1' \
  ip6_addr="vnet1|accept_rtadv" serviio-122

mkdir -p /zroot/iocage/jails/serviio-122/root/zfs/homedirs/common_media
mkdir -p /zroot/iocage/jails/serviio-122/root/zfs/homedirs/common_photos
echo "/zfs/homedirs/common_media /zroot/iocage/jails/serviio-122/root/zfs/homedirs/common_media nullfs ro 0 0" \
	>> /zroot/iocage/jails/serviio-122/fstab
echo "/zfs/homedirs/common_photos /zroot/iocage/jails/serviio-122/root/zfs/homedirs/common_photos nullfs ro 0 0" \
	>> /zroot/iocage/jails/serviio-122/fstab

iocage start serviio-122
iocage console serviio-122

# Set baseline environment
passwd

sysrc hostname="serviio.pa-us.mydomain.name"
sysrc defaultrouter="10.102.2.1" && route add default 10.102.2.1
hostname serviio.pa-us.mydomain.name

pkg install bash zsh tmux vim-console pstree cmdwatch tree

# Setup FFMPEG options per guidance in the helpful links then start Serviio build.
# cd /usr/ports/multimedia/ffmpeg && make config WITH_RTMP=YES WITH_X11GRAB=YES WITH_FAAC=YES WITH_LAME=YES WITH_AMR_NB=YES WITH_AMR_WB=YES WITH_ASS=YES
pkg install serviio dcraw

# Enable and start it.
sysrc serviio_enable="YES"
sysrc serviio_lang="en_US.UTF-8"
sysrc serviio_args="-Dserviio.advertisementDuration=15 -Dserviio.libraryPollerFrequency=5"
service serviio start

# /var/db/serviio contains all critical data to move if migrating to new jail

################################################################################
##                   Unifi Controller Jail Configuration                      ##
################################################################################

iocage create -n unifi-122 -r 12.2-RELEASE
iocage set vnet=on \
  priority="80" boot="on" \
  interfaces='vnet1:bridge1' \
  ip4_addr="vnet1|10.102.2.18/24" \
  defaultrouter='10.102.2.1' \
  ip6_addr="vnet1|accept_rtadv" unifi-122

iocage start unifi-122
iocage console unifi-122

# Set baseline environment
passwd

sysrc hostname="unifi.pa-us.mydomain.name"
sysrc defaultrouter="10.102.2.1" && route add default 10.102.2.1
hostname unifi.pa-us.mydomain.name

pkg install bash zsh tmux vim-console pstree cmdwatch tree

pkg install unifi5
sysrc unifi_enable=YES
service unifi start

# /usr/local/share/java/unifi/data contains all critical data to move if migrating to new jail

################################################################################
##----------------------------------------------------------------------------##
##                        Graylog Jail Configuration                          ##
##----------------------------------------------------------------------------##
################################################################################

iocage create -n graylog-122 -r 12.2-RELEASE
iocage set vnet=on boot="on" \
  mount_procfs=1 \
  interfaces='vnet1:bridge1' \
  ip4_addr="vnet1|10.102.2.16/24" \
  ip6_addr="vnet1|accept_rtadv" graylog-122

iocage start graylog-122
iocage console graylog-122

# Set baseline environment
passwd

sysrc hostname="graylog.pa-us.mydomain.name"
sysrc defaultrouter="10.102.2.1" && route add default 10.102.2.1
hostname graylog.pa-us.mydomain.name

pkg install bash zsh tmux vim-console pstree cmdwatch tree

pkg install graylog elasticsearch6 mongodb36 pwgen

# Set elasticsearch cluster name
sed -i '' -e 's/.*cluster\.name:.*/cluster.name: graylog/' /usr/local/etc/elasticsearch/elasticsearch.yml

# Stage graylog configuration
cd /usr/local/etc/graylog
cp graylog.conf.example graylog.conf
cp log4j2.xml.example log4j2.xml
mkdir server
chown graylog:graylog *

# Pick a password for the 'admin' user initial login
set ROOT_SHA2=`echo -n INSERT_PASSWORD_HERE | sha256`
sed -i '' -e "s|.*root_password_sha2 = .*|root_password_sha2 = $ROOT_SHA2|" /usr/local/etc/graylog/graylog.conf
unset ROOT_SHA2

# Set a random secret to secure/pepper the stored user passwords here
set PWGEN=`pwgen -N 1 -s 96`
sed -i '' -e "s|.*password_secret = .*|password_secret = $PWGEN|" /usr/local/etc/graylog/graylog.conf
unset PWGEN

# Set to listen to the LAN and set default directories
sed -i '' -e 's|.*http_bind_address = 127.0.0.1|http_bind_address = 0.0.0.0|' /usr/local/etc/graylog/graylog.conf
sed -i '' -e 's|.*node_id_file = .*|node_id_file = /var/db/graylog/server/node-id|' /usr/local/etc/graylog/graylog.conf
sed -i '' -e 's|.*bin_dir = .*|bin_dir = /var/db/graylog/bin|' /usr/local/etc/graylog/graylog.conf
sed -i '' -e 's|.*data_dir = .*|data_dir = /var/db/graylog/data|' /usr/local/etc/graylog/graylog.conf
sed -i '' -e 's|.*plugin_dir = .*|plugin_dir = /usr/local/share/graylog/plugin|' /usr/local/etc/graylog/graylog.conf
sed -i '' -e 's|.*message_journal_dir = .*|message_journal_dir = /var/db/graylog/data/journal|' /usr/local/etc/graylog/graylog.conf

# Stage directories
cd /var/db/graylog
install -d -o graylog -g graylog bin data data/journal server

sysrc elasticsearch_enable=YES graylog_enable=YES mongod_enable=YES
service elasticsearch start; service graylog start; service mongod start

# /var/db/elasticsearch contains critical data

################################################################################
##----------------------------------------------------------------------------##
##                                   Cleanup                                  ##
##----------------------------------------------------------------------------##
################################################################################

## Enable Auditing
echo '' >> /etc/rc.conf
echo '# Auditing' >> /etc/rc.conf
echo 'auditd_enable="YES"' >> /etc/rc.conf
service auditd start

## Enable auditdistd
# Examples from https://wiki.freebsd.org/auditdistd
# Passwords/hashes/fingerprints from wiki example, change as needed

## Server side only
# Generate certs
openssl req -x509 -nodes -newkey rsa:4096 -days 1825 -batch -out /etc/security/auditdistd.cert.pem -keyout /etc/security/auditdistd.key.pem
chmod 0600 /etc/security/auditdistd.key.pem /etc/security/auditdistd.cert.pem
chown root:wheel /etc/security/auditdistd.key.pem /etc/security/auditdistd.cert.pem

# Get Fingerprints
openssl x509 -in /etc/security/auditdistd.cert.pem -noout -fingerprint -sha256 | awk -F '[ =]' '{printf("%s=%s\n", $1, $3)}'

# Generate Shared Password
dd if=/dev/urandom bs=32 count=1 | openssl base64 | cut -b -32

# Create /etc/security/auditdistd.conf configuration file
cat > /etc/security/auditdistd.conf << 'EOF'
timeout 300
receiver {
	listen "10.102.2.2:7878"
	host "xju-rtr" {
		remote "10.100.82.1"
		password "YjwbK69H5cEBlhcT+eJpJgJTFn5B2SrG"
	}
	host "xts-rtr" {
		remote "10.102.2.1"
		password "YjwbK69H5cEBlhcT+eJpJgJTFn5B2SrG"
	}
}
'EOF'

## Client side only
sed -i '' -e 's/dist:off/dist:on/g' /etc/security/audit_control

cat > /etc/security/auditdistd.conf << 'EOF'
timeout 300
sender {
	source "10.82.2.1"
	host "xju-rtr" {
		remote "10.102.2.2:7878"
		fingerprint "SHA256=8F:0A:FC:8A:3D:09:80:AF:D9:AA:38:CC:8A:86:53:E6:8F:B6:1C:55:30:14:D7:F9:AA:8B:3E:73:CD:F5:76:2B"
		password "YjwbK69H5cEBlhcT+eJpJgJTFn5B2SrG"
	}
}
'EOF'
cat > /etc/security/auditdistd.conf << 'EOF'
timeout 300
sender {
	source "10.102.2.1"
	host "xts-rtr" {
		remote "10.102.2.2:7878"
		fingerprint "SHA256=8F:0A:FC:8A:3D:09:80:AF:D9:AA:38:CC:8A:86:53:E6:8F:B6:1C:55:30:14:D7:F9:AA:8B:3E:73:CD:F5:76:2B"
		password "YjwbK69H5cEBlhcT+eJpJgJTFn5B2SrG"
	}
}
'EOF'

## Both sides
# Because the configuration file contains passwords, set its permissions properly:
chmod 600 /etc/security/auditdistd.conf
chown root:wheel /etc/security/auditdistd.conf

echo 'auditdistd_enable="YES"' >> /etc/rc.conf
service auditdistd start

################################################################################
##----------------------------------------------------------------------------##
##                             Maintenance Notes                              ##
##----------------------------------------------------------------------------##
################################################################################
# Keep the ports tree in check! Every time you log in and are about to install
# ports, be sure to update the ports tree on both the host and jailed system!
################################################################################

portsnap fetch update

################################################################################
# OR - Shorter version...
#
# Put the portsnap cron into good use. Just run `portsup` with this script to
# update ports with what has already been downloaded during the weekly cron.
# It will unpack the most recent portsnap saved by `portsnap cron` in
# /var/db/portsnap into both the host system and jail system ports trees.
################################################################################

cat > /usr/local/sbin/portsup << 'EOF'
#!/bin/sh
# Just a short script to quickly put the portsnap cron right into use
portsnap update
[ -e "/zfs/jails/basejail/usr/ports/.portsnap.INDEX" ] \
    && portsnap -p "/zfs/jails/basejail/usr/ports" update
'EOF'
chmod 555 /usr/local/sbin/portsup

################################################################################
# Binary Updates with an Ezjail update immediately after.
# http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/updating-upgrading-freebsdupdate.html
################################################################################

# Small Updates, I.E. 9.1-RELEASE to 9.1-RELEASE-p6
freebsd-update fetch
shutdown -r now
freebsd-update install
# for each jail
env UNAME_r=10.2-RELEASE iocage update <jail>
poudriere jail -u -j 101amd64
poudriere jail -u -j 101i386
poudriere jail -u -j 93amd64
poudriere jail -u -j 93i386
poudriere jail -u -j 84amd64
poudriere jail -u -j 84i386

# Big Updates, I.E. 9.2-RELEASE to 10.0-RELEASE
## Backup Old /etc
cp -Rp /etc /root/etc.old
## Run freebsd-update to get the latest patches
freebsd-update upgrade -r 10.1-RELEASE
## Reboot
shutdown -r now
## First `freebsd-update install` and reboot for new kernel
freebsd-update install
shutdown -r now
## Second `freebsd-update install` for new userland
freebsd-update install
shutdown -r now
## Poudriere start - Fetch new Poudriere build jail for new release - Jump ahead if using public packages
poudriere jails -c -j 101amd64 -v 10.1-RELEASE -a amd64
## Rename current make.conf
mv /usr/local/etc/poudriere.d/92amd64-make.conf /usr/local/etc/poudriere.d/101amd64-make.conf
poudriere bulk -f /usr/local/etc/poudriere.d/pkg_list -j 101amd64
## Update local repository files to point to the new release
find / -name myrepo.conf -exec sed -i '' -e 's/92amd64/101amd64/' {} \;
## Delete old build jail
poudriere jail -d -j 91amd64
## Poudriere end - continue from here if just using public packages
pkg-static upgrade -fy
pkg autoremove
## Third `freebsd-update install` to cleanup old libs (major version upgrades only)
freebsd-update install
shutdown -r now
## The host is completely upgraded to the new version and all cleanup is done
## Jails can be updated anytime after upgrading the host.
## Archive original jail set
ezjail-admin stop
ezjail-admin archive -A
## Update basejail to the new release it see already via `uname` and give it the source release
ezjail-admin update -U -s 9.2-RELEASE-p3
## For upgrading to 9.2, open vipw and immediatly save so mergemaster recognizes
## the new auditdistd user
vipw
## For upgrading from 9->10, update deprecated variables to the new format
find /zfs/jails -name periodic.conf -exec sed -i '' -e 's/daily_status_security_ipfwdenied_enable/security_status_ipfwdenied_enable/;s/daily_status_security_ipfwlimit_enable/security_status_ipfwlimit_enable/;s/daily_status_security_kernelmsg_enable/security_status_kernelmsg_enable/' {} \;
## For upgrading from 9->10, update all jail devfs rules to use integers rather than strings
sed -i '' -e 's/"devfsrules_jail"/"4"/;s/"devfsrules_jail_with_vpn"/"5"/;s/"devfsrules_jail_with_bpf"/"6"/' /usr/local/etc/ezjail/*
## Run mergemaster on each jail
mergemaster -p /zfs/jails/newjail
mergemaster -UF -D /zfs/jails/newjail
mergemaster -p /zfs/jails/jail1
mergemaster -UF -D /zfs/jails/jail1 # and continue on for each jail
## Major release upgrades only - disable starting any services dependent on old libraries and start ezjail
find /zfs/jails -name rc.conf.local -exec sed -i '' -e 's/YES/NO/' {} \;
service ezjail start
## Log in to each jail and perform full upgrades on each jail for a new major release
## ssh or `ezjail-admin console <jail>` for each one
pkg-static upgrade -fy
pkg autoremove
## Back to the host; stop, archive, and start again the newly upgraded jails
service ezjail stop
ezjail-admin archive -A
service ezjail start

################################################################################
# Tracking CURRENT/STABLE on host with Boot Environments
################################################################################

# This covers the legacy style process of kernel, reboot, world/packages, reboot
# Update /usr/src and build it
cd /usr/src
git pull
nice make -j `sysctl -n hw.ncpu` buildworld && nice make -j `sysctl -n hw.ncpu` buildkernel
# Install in new BE
beadm list
beadm create <newBE>
beadm mount <newBE> /mnt
make installkernel DESTDIR=/mnt
beadm list
beadm unmount <newBE>
beadm activate <newBE>
# Reboot into the new kernel
shutdown -r now
# At this point, if the kernel has been reliable, upgrade config files and userland
cd /usr/src
etcupdate -s /usr/src -p
make installworld
etcupdate -s /usr/src
# Quick way - just update packages using last build
pkg upgrade
# Alternate - thorough rebuild all packages and remove old libs/deps, could
# be useful after __FreeBSD_version increment or major updates like compiler
poudriere jail -u -j 12xamd64
poudriere bulk -j 12xamd64 -f /usr/local/etc/poudriere.d/pkg_list
pkg-static upgrade -fy -r myrepo
pkg check -r
make -DBATCH_DELETE_OLD_FILES delete-old delete-old-libs
pkg autoremove
# Reboot into the new userland and upgraded packages
shutdown -r now
# Make a snapshot
beadm list
beadm create <beName@snapshot>

# This covers a one reboot and done style installing everything into the boot env
# before rebooting
# Update /usr/src and build it
cd /usr/src
git pull
cd /usr/ports
git pull --rebase
# Kick off the batch of builds including a full rebuild of all packages.
# This is not all required if the old libs/deps are left in place but could
# be useful after __FreeBSD_version increment or major updates like compiler
nice make -j `sysctl -n hw.ncpu` buildworld \
&& nice make -j `sysctl -n hw.ncpu` buildkernel \
&& poudriere jail -u -j 13xamd64 \
&& poudriere bulk -c -j 13xamd64 -f /usr/local/etc/poudriere.d/pkg_list
# Quick version - build source and incremental update of previous package set
nice make -j `sysctl -n hw.ncpu` buildworld \
&& nice make -j `sysctl -n hw.ncpu` buildkernel \
&& poudriere bulk -j 13xamd64 -f /usr/local/etc/poudriere.d/pkg_list
# Install in new BE
beadm list
beadm create `uname -r | sed -e 's/-CURRENT/C/'`-`/bin/date '+%Y%m%d'`
setenv D /mnt
beadm mount `uname -r | sed -e 's/-CURRENT/C/'`-`/bin/date '+%Y%m%d'` $D
# Install Kernel
make installkernel DESTDIR=$D
# Run "pre-world" etcupdate
etcupdate -s /usr/src -D $D -p
# Install world and run post world install etcupdate
make installworld DESTDIR=$D
etcupdate -s /usr/src -D $D
# Update all packages in new environment
pkg-static -c $D upgrade -fy
pkg -c $D clean -a
# Quick version - incremental updates of previous pkg set
pkg-static -c $D upgrade
# check/patch any accordingly
pkg -c $D check -r
# Cleanup src environment (not for quick version/only with full pkg build)
make -DBATCH_DELETE_OLD_FILES delete-old delete-old-libs DESTDIR=$D
# Cleanup pkgs
pkg -c $D autoremove
# Set environment to active next reboot
beadm unmount `uname -r | sed -e 's/-CURRENT/C/'`-`/bin/date '+%Y%m%d'`
beadm activate `uname -r | sed -e 's/-CURRENT/C/'`-`/bin/date '+%Y%m%d'`
beadm list
shutdown -r now

################################################################################
# CONSOLE USE ONLY
# Major system updates short of kernel updates, go to single-user mode
################################################################################

shutdown now
# Perform maintenance, then back to multiuser mode
return
